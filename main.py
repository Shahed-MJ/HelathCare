# -*- coding: utf-8 -*-
"""main

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XOqchPpit6DffTZqPCtjgKOls79uSIRZ

# import and download libraries
"""

import pandas as pd
import firebase_admin
from firebase_admin import credentials, firestore
import datetime
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score
from pyspark.sql import SparkSession
from pyspark.sql.functions import split, col, count
import openai
import os

from flask import Flask, request, jsonify

"""# Load and discover Dataset"""

from google.colab import files
uploaded = files.upload()

df = pd.read_csv("disease_diagnosis.csv")
data = df.copy()

df.head()

df.info()

df.isnull().sum()

from matplotlib import pyplot as plt
import seaborn as sns
df.groupby('Symptom_1').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

plt.figure(figsize=(8, 8))
gender_counts = df['Gender'].value_counts()
plt.pie(gender_counts, labels=gender_counts.index, autopct='%1.1f%%', startangle=140)
plt.title('Gender Distribution')
plt.show()

"""# Preprocessing"""

# Label Encode categorical features
encoders = {}
for col in ['Gender', 'Symptom_1', 'Symptom_2', 'Symptom_3', 'Severity', 'Treatment_Plan']:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    encoders[col] = le

# Process Blood Pressure Column
df[['Systolic_BP', 'Diastolic_BP']] = df['Blood_Pressure_mmHg'].str.split('/', expand=True).astype(int)
df.drop(columns=['Blood_Pressure_mmHg'], inplace=True)

"""# Initialize Spark

"""

from pyspark.sql import SparkSession

spark = SparkSession.builder.appName("Healthcare").getOrCreate()
df_spark = spark.read.csv("disease_diagnosis.csv", header=True, inferSchema=True)
df_spark.show()

"""# Build the model"""

X = df[['Age', 'Gender', 'Symptom_1', 'Symptom_2', 'Symptom_3',
        'Heart_Rate_bpm', 'Body_Temperature_C', 'Oxygen_Saturation_%',
        'Systolic_BP', 'Diastolic_BP', 'Severity']]

y = df['Treatment_Plan']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = RandomForestClassifier(n_estimators=30, max_depth=2, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print("Model Accuracy:", accuracy_score(y_test, y_pred))

import joblib
joblib.dump(model, "model.pkl")
joblib.dump(encoders, "encoders.pkl")

"""# Initialize Firebase"""

from google.colab import files
uploaded = files.upload()

cred = credentials.Certificate("firebase-key.json")
firebase_admin.initialize_app(cred)
db = firestore.client()

"""# Set OpenAI API Key"""

openai.api_key = "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"

def summarize_patient_history(data_dict):
    prompt = f"Patient data: {data_dict}. Summarize the patient's condition and suggest a treatment."
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}]
    )
    return response['choices'][0]['message']['content']

def add_to_firebase(patient_id, summary):
    db.reference(f"patients/{patient_id}").set({
        "summary": summary
    })

"""# Flask App

"""

!pip install flask-ngrok

!pip install pyngrok --quiet
from pyngrok import ngrok
ngrok.set_auth_token("2xdKyYPiqvEb3sViRNS4HTqHTVt_55dfX2sBuXSFx2UjF8bwX")  # Optional but recommended

from flask import Flask, request, jsonify
import joblib
import pandas as pd

# Load model and encoders
model = joblib.load("model.pkl")
encoders = joblib.load("encoders.pkl")

app = Flask(__name__)

@app.route("/", methods=["GET"])
def index():
    return "Healthcare Recommendation System is running!"

@app.route("/recommend", methods=["POST"])
def recommend():
    try:
        data = request.get_json()

        # ðŸ’¡ Convert blood pressure to numeric values
        systolic, diastolic = map(int, data["Blood_Pressure_mmHg"].split("/"))
        features = pd.DataFrame([{
            "Age": data["Age"],
            "Gender": 1 if data["Gender"].lower() == "male" else 0,
            "Symptom_1": data["Symptom_1"],
            "Symptom_2": data["Symptom_2"],
            "Symptom_3": data["Symptom_3"],
            "Heart_Rate_bpm": data["Heart_Rate_bpm"],
            "Body_Temperature_C": data["Body_Temperature_C"],
            "Oxygen_Saturation_%": data["Oxygen_Saturation_%"],
            "Systolic_BP": systolic,
            "Diastolic_BP": diastolic,
            "Severity": data["Severity"]
        }])

        # ðŸ§  Get model prediction
        prediction = model.predict(features)[0]

        # âœ… Step 1: Summarize patient history
        summary = summarize_patient_history(data)

        # âœ… Step 2: Save to Firebase
        add_to_firebase(data["Patient_ID"], summary)

        return jsonify({
            "treatment_recommendation": prediction,
            "summary": summary
        })

    except Exception as e:
        return jsonify({"error": str(e)}), 500

from flask import Flask, request, jsonify
import joblib
import pandas as pd

# Load model and encoders
model = joblib.load("model.pkl")
encoders = joblib.load("encoders.pkl")

app = Flask(__name__)

@app.route("/", methods=["GET"])
def index():
    return "Healthcare Recommendation System is running!"

@app.route("/recommend", methods=["POST"])
def recommend():
    try:
        data = request.get_json()
        systolic, diastolic = map(int, data["Blood_Pressure_mmHg"].split("/"))

        input_dict = {
            "Age": data["Age"],
            "Gender": encoders["Gender"].transform([data["Gender"]])[0],
            "Symptom_1": encoders["Symptom_1"].transform([data["Symptom_1"]])[0],
            "Symptom_2": encoders["Symptom_2"].transform([data["Symptom_2"]])[0],
            "Symptom_3": encoders["Symptom_3"].transform([data["Symptom_3"]])[0],
            "Heart_Rate_bpm": data["Heart_Rate_bpm"],
            "Body_Temperature_C": data["Body_Temperature_C"],
            "Oxygen_Saturation_%": data["Oxygen_Saturation_%"],
            "Systolic_BP": systolic,
            "Diastolic_BP": diastolic,
            "Severity": encoders["Severity"].transform([data["Severity"]])[0],
        }

        input_df = pd.DataFrame([input_dict])
        prediction = model.predict(input_df)[0]
        treatment = encoders["Treatment_Plan"].inverse_transform([prediction])[0]

        return jsonify({"treatment_recommendation": treatment})

    except Exception as e:
        return jsonify({"error": str(e)}), 500

import threading

def run_flask():
    app.run(host="0.0.0.0", port=5000)

thread = threading.Thread(target=run_flask)
thread.start()

public_url = ngrok.connect(5000)
print("Your public URL:", public_url)

import requests

data = {
     "Patient_ID": 123,
     "Age": 45,
     "Gender": "Male",
     "Symptom_1": "Headache",
     "Symptom_2": "Fever",
     "Symptom_3": "Cough",
     "Heart_Rate_bpm": 80,
     "Body_Temperature_C": 38.0,
     "Blood_Pressure_mmHg": "130/85",
     "Oxygen_Saturation_%": 96,
     "Severity": "Mild"
}

url = "https://b0be-34-168-6-39.ngrok-free.app/recommend"  # Replace with real URL
response = requests.post(url, json=data)

print(response.status_code)
print(response.json())